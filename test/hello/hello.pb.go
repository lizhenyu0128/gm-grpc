// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	grpc "github.com/Hyperledger-TWGC/grpc"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Content struct {
	Detail               string   `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_d60b94de8e910740, []int{0}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (dst *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(dst, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*Content)(nil), "Content")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommunicateClient is the client API for Communicate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommunicateClient interface {
	Speak(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Content, error)
}

type communicateClient struct {
	cc *grpc.ClientConn
}

func NewCommunicateClient(cc *grpc.ClientConn) CommunicateClient {
	return &communicateClient{cc}
}

func (c *communicateClient) Speak(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/communicate/Speak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicateServer is the server API for Communicate service.
type CommunicateServer interface {
	Speak(context.Context, *Content) (*Content, error)
}

func RegisterCommunicateServer(s *grpc.Server, srv CommunicateServer) {
	s.RegisterService(&_Communicate_serviceDesc, srv)
}

func _Communicate_Speak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicateServer).Speak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communicate/Speak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicateServer).Speak(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

var _Communicate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "communicate",
	HandlerType: (*CommunicateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Speak",
			Handler:    _Communicate_Speak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_hello_d60b94de8e910740) }

var fileDescriptor_hello_d60b94de8e910740 = []byte{
	// 106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe4, 0x62, 0x77, 0xce, 0xcf, 0x2b, 0x49,
	0xcd, 0x2b, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0x49, 0x2d, 0x49, 0xcc, 0xcc, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x8c, 0x74, 0xb8, 0xb8, 0x93, 0xf3, 0x73, 0x73, 0x4b, 0xf3, 0x32,
	0x93, 0x13, 0x4b, 0x52, 0x85, 0x64, 0xb9, 0x58, 0x83, 0x0b, 0x52, 0x13, 0xb3, 0x85, 0x38, 0xf4,
	0xa0, 0x3a, 0xa5, 0xe0, 0x2c, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xb9, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x67, 0xf9, 0x92, 0x99, 0x66, 0x00, 0x00, 0x00,
}
